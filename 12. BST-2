Problem 1 :

Find path in BST
Send Feedback
Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST) in a list. Return empty list otherwise.
Note: Assume that BST contains all unique elements.
Input Format :
The first line of input contains data of the nodes of the tree in level order form. The data of the nodes of the tree is separated by space. If any node does not have left or right child, take -1 in its place. Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.   
The following line of input contains an integer, that denotes the value of k.
Output Format :
The first line and only line of output prints the data of the nodes in the path from node k to root. The data of the nodes is separated by single space.
Constraints:
Time Limit: 1 second   
Sample Input 1:
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2
Sample Output 1:
2 5 8

Soln:



import queue
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def findPathBST(root,data):
    if root is None: 
	    return None
    if data == root.data: 
	    output = [] 
	    output.append(root.data) 
	    return output 
    elif data < root.data: 
	    output = findPathBST(root.left,data) 
	    if output is not None: 
		    output.append(root.data) 
	    return output 
    else: 
	    output = findPathBST(root.right,data) 
	    if output is not None: 
		    output.append(root.data) 
	    return output   


def buildLevelTree(levelorder):
    index = 0
    length = len(levelorder)
    if length<=0 or levelorder[0]==-1:
        return None
    root = BinaryTreeNode(levelorder[index])
    index += 1
    q = queue.Queue()
    q.put(root)
    while not q.empty():
        currentNode = q.get()
        leftChild = levelorder[index]
        index += 1
        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)
        rightChild = levelorder[index]
        index += 1
        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)
    return root

# Main
levelOrder = [int(i) for i in input().strip().split()]
root = buildLevelTree(levelOrder)
data = int(input())
path = findPathBST(root,data)
if path is not None:
    for ele in path:
        print(ele)

Problem 2 :

BST Class
Send Feedback
Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. Assume unique elements will be given.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
wherer, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.



Soln:

class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
class BST:
    
    def __init__(self):
        self.root = None
        self.numNodes = 0
    
    def printTreeHelper(self, root):
        if root == None:
            return
        print(root.data, end = ":")
        if root.left != None:
            print("L:",end='')
            print(root.left.data,end=',')
        if root.right != None:
            print("R:",end='')
            print(root.right.data,end='')
        print()
        self.printTreeHelper(root.left)
        self.printTreeHelper(root.right)
    
    def printTree(self):
        self.printTreeHelper(self.root)
    
    def searchHelper(self,root,k):
        if root==None:
            return None
        if root.data==k:
            return True
        elif root.data>k:
            return self.searchHelper(root.left, k)
        else:
            return self.searchHelper(root.right, k)
        return False
        
    
    def search(self, data):
        return self.searchHelper(self.root,data)
    
    def insertHelper(self,node,key):
        if node is None: 
            return BinaryTreeNode(key) 

        # Otherwise recur down the tree 
        if key < node.data: 
            node.left = self.insertHelper(node.left, key) 
        else: 
            node.right = self.insertHelper(node.right, key) 

        # return the (unchanged) node pointer 
        return node  
             
            
    def insert(self, data):
        self.numNodes = self.numNodes+1
        self.root = self.insertHelper(self.root,data)
    
    def minValueNode(self, node): 
        current = node 
        while(current.left is not None): 
            current = current.left  
        return current
    
    def deleteNode(self,root,data):
        if root is None: 
            return root  
        if data < root.data: 
            root.left = self.deleteNode(root.left, data) 
        elif(data > root.data): 
            root.right = self.deleteNode(root.right, data) 
        else: 
            if root.left is None : 
                temp = root.right  
                root = None 
                return temp  
            elif root.right is None : 
                temp = root.left  
                root = None
                return temp  
            temp = self.minValueNode(root.right) 
            root.data = temp.data 
            root.right = self.deleteNode(root.right , temp.data)
        return root  
        
       
    def delete(self, data):
        self.numNodes = self.numNodes-1
        deletedNodeIs = self.deleteNode(self.root,data)
    
    def count(self):
        return self.numNodes
b = BST()
li = [int(ele) for ele in input().split()]
i = 0
while(i < (len(li) )):
    choice = li[i]
    if choice == 1:
        data = li[i+1]
        b.insert(data)
        i+=2
    elif choice == 2:
        data = li[i+1]
        b.delete(data)
        i+=2
    elif choice == 3:
        data = li[i+1]
        ans = b.search(data)
        if ans is True:
            print('true')
        else:
            print('false')
        i+=2
    else:
        b.printTree()
        i+=1
        
