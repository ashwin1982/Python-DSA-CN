1. Kruskal's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5

soln: 

class Edge:
    def __init__(self,src,dest,wt):
        self.src=src
        self.dest = dest
        self.wt=wt

def getParent(v,parent):
    if v==parent[v]:
        return v
    return getParent(parent[v],parent)
    
def kruskal(edges,n,E):
    edges = sorted(edges,key=lambda edge:edge.wt)
    output =[]
    parent = [i for i in range(n)]
    count = 0
    i=0
    while count < (n-1):
        currentEdge = edges[i]
        srcParent = getParent(currentEdge.src, parent)
        destParent =  getParent(currentEdge.dest,parent)
        if srcParent != destParent:
            output.append(currentEdge)
            count+=1
            parent[srcParent] = destParent
        i =i+ 1
    return output

li = [int(ele) for ele in input().split()]
n = li[0]
E = li[1]
edges = []
for i in range(E):
    curr_input = [int(ele) for ele in input().split()]
    src = curr_input[0]
    dest = curr_input[1]
    wt = curr_input[2]
    edge = Edge(src,dest,wt)
    edges.append(edge)
output = kruskal(edges,n,E)
for ele in output:
    if(ele.src <ele.dest):
        print(str(ele.src)+" "+str(ele.dest)+" "+str(ele.wt))
    else:
        print(str(ele.dest)+" "+str(ele.src)+" "+str(ele.wt))

    

2. Prim's Algorithm Problem
Send Feedback
ID: 1724

Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5


soln:

import sys
class Graph:
    def __init__(self, nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [[0 for i in range(nVertices)] for j in range(nVertices)]
       
    
    def addEdge(self, v1, v2, wt):
        self.adjMatrix[v1][v2] = wt
        self.adjMatrix[v2][v1] = wt
        
        
    def removeEdge(self, v1, v2):
        if self.containEdge(v1, v2) is False:
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v1] = 0
        
        
    def containsEdge(self, v1, v2):
        return True if self.adjMatrix[v1][v2] > 0 else False
        
    def __str__(self):
        return str(self.adjMatrix)
    
    def __dfsHelper(self, sv, visited):
        
        print(sv)
        visited[sv] = True            # Marking vertex as visited
        for i in range(self.nVertices):
            if self.adjMatrix[sv][i] > 0 and visited[i] is False:
                self.__dfsHelper(i, visited)
        
    
    def dfs(self):          # USing DFS for traversing all vertices of a graph
        visited = [False for i in range(self.nVertices)]
        self.__dfsHelper(0, visited)
    
    def __getMinVertex(self, visited, weight):
        
        min_vertex = -1
        for i in range(self.nVertices):
            if(visited[i] is False and (min_vertex == -1 or weight[min_vertex] > weight[i])):
                min_vertex = i
                
        return min_vertex
    
    def prims(self):
        visited = [False for i in range(self.nVertices)]
        parent = [-1 for i in range(self.nVertices)]
        weight = [sys.maxsize for i in range(self.nVertices)]
        weight[0] = 0
        
        for i in range(self.nVertices - 1):
            min_vertex = self.__getMinVertex(visited, weight)
            visited[min_vertex] = True
            
            #Explore the neighbours of min vertex which is not visited and 
            # update the weight corresponding to them if required
            
            for j in range(self.nVertices):
                if self.adjMatrix[min_vertex][j] > 0 and visited[j] is False:
                    if((weight[j]) > (self.adjMatrix[min_vertex][j])):
                        weight[j] = self.adjMatrix[min_vertex][j]
                        parent[j] = min_vertex
                        
        for i in range(1, self.nVertices):
            if i < parent[i]:
                print(str(i) + " " + str(parent[i]) + " " + str(weight[i]))
                
            else:
                print(str(parent[i]) + " " + str(i) + " " + str(weight[i]))
    

li = [int(ele) for ele in input().split()]
n = li[0]
E = li[1]

g = Graph(n)
for i in range(E):
    curr_input = [int(ele) for ele in input().split()]
    g.addEdge(curr_input[0], curr_input[1], curr_input[2])
g.prims()


3. Dijkstra's Algorithm
Send Feedback
ID: 1725

Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
For each vertex, print its vertex number and its distance from source, in a separate line. The vertex number and its distance needs to be separated by a single space.
Note : Order of vertices in output doesn't matter.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5

soln: 



import sys 
  
class Graph: 
  
    def __init__(self, vertices): 
        self.V = vertices 
        self.m = [[0 for column in range(vertices)]  
                      for row in range(vertices)] 
        
    def addEdge(self, v1, v2, wt):
        self.m[v1][v2] =wt
        self.m[v2][v1] = wt
  
    def printSolution(self, dist): 
        for node in range(self.V): 
            print(str(node) + " " + str(dist[node]))
            
            
    def _str_(self):
        return str(self.m)
  
    def minDistance(self, dist, sptSet): 
  
        min = sys.maxsize 
        for v in range(self.V): 
            if dist[v] < min and sptSet[v] == False: 
                min = dist[v] 
                min_index = v 
  
        return min_index 
 
    def dijkstra(self, src): 
  
        dist = [sys.maxsize] * self.V 
        dist[src] = 0
        sptSet = [False] * self.V 
  
        for cout in range(self.V): 
            u = self.minDistance(dist, sptSet) 
  
            sptSet[u] = True

            for v in range(self.V): 
                if self.m[u][v] > 0 and sptSet[v] == False and dist[v] > dist[u] + self.m[u][v]: 
                        dist[v] = dist[u] + self.m[u][v] 
  
        self.printSolution(dist) 
    
li = [int(ele) for ele in input().split()]
n=li[0]
E=li[1]

g =Graph(n)
for i in range(E):
    curr_input=[int(ele) for ele in input().split()]
    g.addEdge(curr_input[0],curr_input[1],curr_input[2])
    
g.dijkstra(0)
