Problem 1 :

Power Of A Number
Send Feedback
Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to return the answer.
Do this recursively.
Input format :
Two integers x and n (separated by space)
Output Format :
x^n (i.e. x raise to the power n)
Constraints :
1 <= x <= 30
0 <= n <= 30
Sample Input 1 :
 3 4
Sample Output 1 :
81
Sample Input 2 :
 2 5
Sample Output 2 :
32

Soln:

def power(x, n):
    if (n == 0): return 1
    elif (int(n % 2) == 0): 
        return (power(x, int(n / 2)) * power(x, int(n / 2))) 
    else: 
        return (x * power(x, int(n / 2)) * power(x, int(n / 2))) 
    
    
    
    pass

# Main
from sys import setrecursionlimit
setrecursionlimit(11000)
x, n=list(int(i) for i in input().strip().split(' '))
print(power(x, n))



Problem 2 :

Array Intersection
Send Feedback
You have been given two integer arrays/list(ARR1 and ARR2) of size N and M, respectively. You need to print their intersection; An intersection for this problem can be defined when both the arrays/lists contain a particular value or to put it in other words, when there is a common value that exists in both the arrays/lists.
Note :
Input arrays/lists can contain duplicate elements.

The intersection elements printed would be in the order they appear in the first sorted array/list(ARR1).


Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains an integer 'N' representing the size of the first array/list.

The second line contains 'N' single space separated integers representing the elements of the first the array/list.

The third line contains an integer 'M' representing the size of the second array/list.

The fourth line contains 'M' single space separated integers representing the elements of the second array/list.
Output format :
For each test case, print the intersection elements in a row, separated by a single space.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^6
0 <= M <= 10^6

Time Limit: 1 sec 
Sample Input 1 :
2
6
2 6 8 5 4 3
4
2 3 4 7 
2
10 10
1
10
Sample Output 1 :
2 3 4
10
Sample Input 2 :
1
4
2 6 1 2
5
1 2 3 4 2
Sample Output 2 :
1 2 2
Explanation for Sample Output 2 :
Since, both input arrays have two '2's, the intersection of the arrays also have two '2's. The first '2' of first array matches with the first '2' of the second array. Similarly, the second '2' of the first array matches with the second '2' if the second array.



Soln:

def intersection(arr1, arr2, m, n):
    arr1.sort()
    arr2.sort()
    i,j = 0,0
    
    while i<m and j<n:
        if arr1[i]<arr2[j]:
            i=i+1
        elif arr2[j]<arr1[i]:
            j=j+1
        else:
            print(arr1[i])
            i=i+1
            j=j+1

# Main
n1=int(input())
arr1=list(int(i) for i in input().strip().split(' '))
n2=int(input())
arr2=list(int(i) for i in input().strip().split(' '))
m=len(arr1)
n=len(arr2)
intersection(arr1, arr2, m, n) 



Problem 3 :

Array Equilibrium Index
Send Feedback
For a given array/list(ARR) of size 'N,' find and return the 'Equilibrium Index' of the array/list.
Equilibrium Index of an array/list is an index 'i' such that the sum of elements at indices [0 to (i - 1)] is equal to the sum of elements at indices [(i + 1) to (N-1)]. One thing to note here is, the item at the index 'i' is not included in either part.
If more than one equilibrium indices are present, then the index appearing first in left to right fashion should be returned. Negative one(-1) if no such index is present.
Example:
Let's consider an array/list Arr = [2, 3, 10, -10, 4, 2, 9]  of size, N = 7.

There exist two equilibrium indices, one at 2 and another at 3.

At index 2, the sum of all the elements to the left, [2 + 3] is 5, and the elements to its right, [-10 + 4 + 2 + 9] is also 5. Hence index 2 is an equilibrium index according to the condition we want to achieve. Mind it that we haven't included the item at index 2, which is 10, to either of the parts.

Similarly, we can see at index 3, the elements to its left sum up to 15 and to the right, sum up to 15 either. 

Since index 2 comes early in the order, left to right, the answer would be 2.
Input Format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains an integer 'N' representing the size of the first array/list.

The second line contains 'N' single space separated integers representing the elements of the array/list
Output Format :
For each test case, print the 'Equilibrium Index'.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^6

Time Limit: 1 sec 
Sample Input 1 :
1
5
1 4 9 3 2
Sample Output 1 :
2
Sample Input 2 :
2
3
1 4 6
3
1 -1 4
Sample Output 2 :
-1
2

Soln:

def equilibriumIndex(arr):
    n=len(arr)
    rs=0
    k=1
    while k<n:
        rs=rs+arr[k]
        k=k+1
    i=1
    b=0
    ls=0
    while i<n-2:
        ls=ls+arr[i-1]
        rs=rs-arr[i]
        if ls==rs:
            b=i
            break
        i=i+1
    if b==0:
        return -1
    else:
        return b
    # Please add your code here
pass

# Main
n = int(input())
arr = [int(i) for i in input().strip().split()]
print(equilibriumIndex(arr))

Problem 4 :

Find the Unique Element
Send Feedback
You have been given an integer array/list(ARR) of size N. Where N is equal to [2M + 1].
Now, in the given array/list, 'M' numbers are present twice and one number is present only once.
You need to find and return that number which is unique in the array/list.
 Note:
Unique element is always present in the array/list according to the given condition.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.
Output Format :
For each test case, print the unique element present in the array.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^6

Time Limit: 1 sec
Sample Input 1:
1
7
2 3 1 6 3 6 2
Sample Output 1:
1
Sample Input 2:
2
5
2 4 7 2 7
9
1 3 1 3 6 6 7 10 7
Sample Output 2:
4
10

Soln:

def FindUnique(arr):
    n=len(arr)
    res = arr[0] 
    for i in range(1,n): 
        res = res ^ arr[i] 
    return res
    pass

# Main
n=int(input())
arr=list(int(i) for i in input().strip().split(' '))
unique=FindUnique(arr)
print(unique)



Problem 5 :

Duplicate in array
Send Feedback
You have been given an integer array/list(ARR) of size N which contains numbers from 0 to (N - 2). Each number is present at least once. That is, if N = 5, the array/list constitutes values ranging from 0 to 3, and among these, there is a single integer value that is present twice. You need to find and return that duplicate number present in the array.
Note :
Duplicate number is always present in the given array/list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.
Output Format :
For each test case, print the duplicate element in the array/list.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^6

Time Limit: 1 sec
Sample Input 1:
1
9
0 7 2 5 4 7 1 3 6
Sample Output 1:
7
Sample Input 2:
2
5
0 2 1 3 1
7
0 3 1 5 4 3 2
Sample Output 2:
1
3

Soln:

def duplicate(arr):
    sum=0
    for i in range(len(arr)):
        sum=sum+arr[i]
    d=sum-sn
    return d
    
n=int(input())
sn=((n-2)*(n-1))//2
arr=[int(x) for x in input().split( )]
print(duplicate(arr))

Problem 6 :

Pair sum in array
Send Feedback
You have been given an integer array/list(ARR) and a number 'num'. Find and return the total number of pairs in the array/list which sum to 'num'.
Note:
Given array/list can contain duplicate elements. 
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the first array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains an integer 'num'.
Output format :
For each test case, print the total number of pairs present in the array/list.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^4
0 <= num <= 10^9

Time Limit: 1 sec
Sample Input 1:
1
9
1 3 6 2 5 4 3 2 4
7
Sample Output 1:
7
Sample Input 2:
2
9
1 3 6 2 5 4 3 2 4
12
6
2 8 10 5 -2 5
10
Sample Output 2:
0
2


 Explanation for Input 2:
Since there doesn't exist any pair with sum equal to 12 for the first query, we print 0.

For the second query, we have 2 pairs in total that sum up to 10. They are, (2, 8) and (5, 5).



Soln:

def merge(arr1,arr2,arr):
    l1=len(arr1)
    l2=len(arr2)
    i=0 
    j=0
    k=0
    while i<l1 and j<l2:
        if arr1[i]<arr2[j]:
            arr[k]=arr1[i]
            i=i+1
            k=k+1
        else:
            arr[k]=arr2[j]
            j=j+1
            k=k+1
    if i<l1:
        while i<l1:
            arr[k]=arr1[i]
            i=i+1
            k=k+1
    if j<l2:
        while j<l2:
            arr[k]=arr2[j]
            j=j+1
            k=k+1
def mergeSort(arr):
    if len(arr)==0 or len(arr)==1:
        return
    mid=len(arr)//2
    arr1=arr[0:mid]
    arr2=arr[mid:]
    mergeSort(arr1)
    mergeSort(arr2)
    merge(arr1,arr2,arr)
    # Please add your code here
pass

def pairSum(arr, x):
    mergeSort(arr)
    i=0
    j=len(arr)-1
    while i<j:
        z=arr[i]+arr[j]
        if z<x:
            i=i+1
        elif z>x:
            j=j-1
        else:
            b=i
            c=j
            c1=1
            c2=1
            while b<j and arr[b]==arr[b+1] :
                c1=c1+1
                b=b+1
            if c>b:
                while c>b and arr[c]==arr[c-1]:
                    c2=c2+1
                    c=c-1
                v=c1*c2
            elif c==b:
                h=c1-1
                v=0
                for q in range(h):
                    v=v+h
                    h=h-1
            for s in range(v):
                print(arr[i],end=' ')
                print(arr[j])
            i=b+1
            j=c-1
    # Please add your code here
    pass

# Main
n=int(input())
arr=list(int(i) for i in input().strip().split(' '))
sum=int(input())
pairSum(arr, sum)



Problem 7 :

Triplet sum
Send Feedback
You have been given a random integer array/list(ARR) and a number X. Find and return the triplet(s) in the array/list which sum to X.
Note :
Given array/list can contain duplicate elements.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the first array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains an integer 'X'.
Output format :
For each test case, print the total number of triplets present in the array/list.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^3
0 <= X <= 10^9

Time Limit: 1 sec
Sample Input 1:
1
7
1 2 3 4 5 6 7 
12
Sample Output 1:
5
Sample Input 2:
2
7
1 2 3 4 5 6 7 
19
9
2 -5 8 -6 0 5 10 11 -3
10
Sample Output 2:
0
5


 Explanation for Input 2:
Since there doesn't exist any triplet with sum equal to 19 for the first query, we print 0.

For the second query, we have 5 triplets in total that sum up to 10. They are, (2, 8, 0), (2, 11, -3), (-5, 5, 10), (8, 5, -3) and (-6, 5, 11)



Soln:

import math as mt 

def printTriplet(arr,sum):
    
    
    arr.sort()
    
    for i in range(len(arr)-2):
        
        start = i + 1
        end = len(arr) - 1
        val = sum - arr[i]
        
        while start < end:
            
            if arr[start] + arr[end] > val:
                end -= 1
                
            elif arr[start] + arr[end] < val:
                start += 1
                
            else:
                count1 = 0
                count2 = 0
                
                for ptr in range(start, end):
                    if arr[ptr] == arr[start]:
                        count1 += 1
                    else:
                        break
                        
                for ptr in range(end, start, -1):
                    if arr[ptr] == arr[end]:
                        count2 += 1
                    else:
                        break
                        
                combinations = count1 * count2
                
                if arr[start] == arr[end]:
                    combinations = ((end-start+1)*(end-start))//2
                    
                for k in range(combinations):
                    print(arr[i], arr[start], arr[end])
                    
                start += count1
                end -= count2




                
n=int(input())
arr=list(int(i) for i in input().strip().split(' '))
sum=int(input())
printTriplet(arr, sum)

Problem 8 :

Rotate array
Send Feedback
You have been given a random integer array/list(ARR) of size N. Write a function that rotates the given array/list by D elements(towards the left).
 Note:
Change in the input array/list itself. You don't need to return or print the elements.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains the value of 'D' by which the array/list needs to be rotated.
Output Format :
For each test case, print the rotated array/list in a row separated by a single space.

Output for every test case will be printed in a separate line.
Constraints :
1 <= t <= 10^4
0 <= N <= 10^6
0 <= D <= N
Time Limit: 1 sec
Sample Input 1:
1
7
1 2 3 4 5 6 7
2
Sample Output 1:
3 4 5 6 7 1 2
Sample Input 2:
2
7
1 2 3 4 5 6 7
0
4
1 2 3 4
2
Sample Output 2:
1 2 3 4 5 6 7
3 4 1 2



Soln:

from sys import stdin


def rotate(arr, n, d):
    if d == 0 :
        return arr
    if d >= n and n != 0 :
        d = d % 10
    treverse (arr,0,n)
    treverse (arr,0,n-d)
    treverse (arr,n-d,n)
       
def treverse (arr,start,end ) :
    length = end - start
    for i in range(length// 2) :
        arr[start],arr[end-1] = arr[end-1],arr[start]
        start += 1
        end -= 1
