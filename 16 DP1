1. Min Steps To 1

Send Feedback
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Input format :
The first and the only line of input contains an integer value, 'n'.
Output format :
Print the minimum number of steps.
Constraints :
1 <= n <= 10 ^ 6

Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1


soln: 


def countMinStepsToOne(n) :
    storage=[-1]*(n+1)
    storage[0]=0
    storage[1]=0
    bigNumber=2147483647
    for i in range(2,n+1):
        op1=storage[i-1]
        op2=storage[i//2] if i%2==0 else bigNumber
        op3=storage[i//3] if i%3==0 else bigNumber
        storage[i]=1+min(op1,op2,op3)
    return storage[n]

#main
n=int(input())
print(countMinStepsToOne(n))



2. Minimum Number Of Squares
Send Feedback
A number can always be represented as a sum of squares of other numbers. Note that 1 is a square and we can always break a number as [(1 * 1) + (1 * 1) + (1 * 1) + …]. Given a number n, find the minimum number of squares that sum to n.
Input format:
 The first and only line of input contains an integer N (1 <= N <= 10000)
Constraints:
 Time Limit: 1 seconds
Output format:
The first and only line of output contains the minimum number if squares that sum to n.
Sample Test Cases:
Sample Input 1:
100
Sample Output 1:
1
Explanation:
We can write 100 as 10^2 also, 100 can be written as (5^2) + (5^2) + (5^2) + (5^2), but this representation requires 4 squares. So, in this case, the expected answer would be 1, that is, 10^2.


soln: 


import sys,math
def minStepsTo1(n):
    dp = [-1 for i in range(n + 1)]
    dp[0] = 0

    for i in range(1, n + 1):
        ans = sys.maxsize
        root = int(math.sqrt(i))

        for j in range(1, root + 1):
            cur_ans = 1 + dp[i - (j ** 2)]
            ans = min(ans, cur_ans)
        dp[i] = ans
    return dp[n]
    pass

        

    
n = int(input())
ans = minStepsTo1(n)
print(ans)



3. Longest Increasing Subsequence
Send Feedback
Given an array with N elements, you need to find the length of the longest subsequence in the given array such that all elements of the subsequence are sorted in strictly increasing order.
Input Format
The first line of input contains an integer N. The following line contains N space separated integers, that denote the value of elements of array.
Output Format
The first and only line of output contains the length of longest subsequence.
Constraints
1 <= N <= 10^3
Time Limit: 1 second
Sample Input 1 :
6
5 4 11 1 16 8
Sample Output 1 :
3
Sample Output Explanation
Length of longest subsequence is 3 i.e. (5,11,16) or (4,11,16).
Sample Input 2 :
3
1 2 2
Sample Output 2 :
2


soln: 

def lis(arr):
    n = len(arr)
    dp = [-1 for i in range(n)]
    dp[n - 1] = 1
    i = n - 2
    while i >= 0:
        including_max = 1
        further_including_max = 0
        for j in range(i + 1, n):

            if arr[j] > arr[i]:
                further_including_max = dp[j]

            including_max = max(including_max, 1 + further_including_max)
        dp[i] = including_max
        i -= 1
    return max(dp)
    pass

n = int(input())
li = [int(ele) for ele in input().split()]
print(lis(li))
