1. Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2


soln: 

# Write your code hereimport queue

import queue 
class Graph:
    def __init__(self, nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [[0 for i in range(nVertices)] for j in range(nVertices)]
       
    
    def addEdge(self, v1, v2):
        self.adjMatrix[v1][v2] = 1
        self.adjMatrix[v2][v1] = 1
        
        
    def removeEdge(self, v1, v2):
        if self.containEdge(v1, v2) is False:
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v1] = 0
        
        
    def containsEdge(self, v1, v2):
        return True if self.adjMatrix[v1][v2] > 0 else False
        
    def __str__(self):
        return str(self.adjMatrix)
    
  
    def bfsHelper(self,i,visited):
        q = queue.Queue()
        visited[i] = True
        q.put(i)
        while q.empty() is False:
          u = q.get()
          print(u, end = " ")
          for i in range(self.nVertices):
            if self.adjMatrix[u][i] > 0 and visited[i] is False:
              q.put(i)
              visited[i] = True
                
    def bfs(self):       # Using BFS for traversing all vertices of a graph
        visited = [False for i in range(self.nVertices)]
        for i in range(self.nVertices):
            if visited[i] is False:
                self.bfsHelper(i,visited)
        
    
    
v, e = [int(x) for x in input().split()[:2]]    
g = Graph(v)
for i in range(e):
    a, b = [int(x) for x in input().split()[:2]]
    g.addEdge(a,b)
g.bfs()


2. Code : Has Path
Send Feedback
Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), check if there exists any path between them or not. Print true if the path exists and false otherwise.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex 'a' and 'b'.
The following line contain two integers, that denote the value of v1 and v2.
Output Format :
The first and only line of output contains true, if there is a path between v1 and v2 and false otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= 1000
0 <= a <= V - 1
0 <= b <= V - 1
0 <= v1 <= 2^31 - 1
0 <= v2 <= 2^31 - 1
Time Limit: 1 second
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false

soln: 

import queue
class graph():
    def __init__(self,nvertices):
        self.vertices=nvertices
        self.adjmat=[[0 for i in range(nvertices)] for j in range(nvertices)]
        
    def __str__(self):
        return str(self.adjmat)
    
    def addedge(self,i,j):
        self.adjmat[i][j]=1
        self.adjmat[j][i]=1
        
    def removedge(self,i,j):
        if getedge(i,j) is False:
            return 
        else:
            self.adjmat[i][j]=0
            self.adjmat[j][i]=0
            
    def getedge(self,i,j):
        if self.adjmat[i][j]>0:
            return True
        else:
            return False 
    
    def __bfshelper(self,v,visited):
        q=queue.Queue()
        q.put(v)
        visited[v]=True
        a=[]
        while q.empty() is False:
            i=q.get()
            a.append(i)
            for j in range(self.vertices):
                if (self.getedge(i,j) is True) and (visited[j] is False):
                    q.put(j)
                    visited[j]=True
        return a
    
    def bfs(self):
        visited=[False for x in range(self.vertices)]
        b=[]
        for i in range(self.vertices):
            if visited[i] is False:
                b.append(self.__bfshelper(i,visited))
        return b
        
    def haspath(self,i,j):
        if self.getedge(i,j) is True:
            return True
        else:
            for k in range(self.vertices):
                if (self.getedge(k,j) is True) and self.haspath(k,j) is True:
                    return True
            return False
                
        
v,e=map(int,input().split())
g=graph(v)
for i in range(e):
    a,b=map(int,input().split())
    g.addedge(a,b)
a,b=map(int,input().split())
s=g.bfs()
c=0
for i in s:
    if a in i and b in i:
        c+=1
        break
if c>0:
    if g.haspath(a,b) is True:
        print('true')
    else:
        print('false')
else:
    print('false')
    
    
3. Code : Get Path - DFS
Send Feedback
Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), find and print the path from v1 to v2 (if exists). Print nothing if there is no path between v1 and v2.
Find the path using DFS and print the first path that you encountered.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
3. Print the path in reverse order. That is, print v2 first, then intermediate vertices and v1 at last.
4. Save the input graph in Adjacency Matrix.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex 'a' and 'b'.
The following line contain two integers, that denote the value of v1 and v2.
Output Format :
Print the path from v1 to v2 in reverse order.
Constraints :
2 <= V <= 1000
1 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
0 <= v1 <= 2^31 - 1
0 <= v2 <= 2^31 - 1
Time Limit: 1 second
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
3 0 1
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :

soln: 

from sys import stdin, setrecursionlimit
setrecursionlimit(10**6)
import queue

class Graph:
    def __init__(self, nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [[0 for i in range(nVertices)] for j in range(nVertices)]
    
    def addEdge(self, v1, v2):
        self.adjMatrix[v1][v2] = 1
        self.adjMatrix[v2][v1] = 1
    
    def removeEdge(self):
        if self.containsEdge(v1, v2) is False :
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v1] = 0
        
    def containsEdge(self, v1, v2):
        if self.adjMatrix[v1][v2] > 0:
            return True
        else: 
            return False
        
    def __str__(self):
        return str(self.adjMatrix)
    
        
               
       
    def __getPathDFS(self, sv, ev, visited) :
        if sv == ev :
            return list([sv])
        
        visited[sv] = True
    
        for i in range(self.nVertices) :
            if self.adjMatrix[sv][i] == 1 and not visited[i] :
                li = self.__getPathDFS(i, ev, visited)
                
                if li != None :
                    li.append(sv)
                    return li
        
        return None
    
 
    
    def getPathDFS(self, sv, ev) :
        visited = [False for i in range(self.nVertices)]
        return self.__getPathDFS(sv, ev, visited)   



# Main
li = stdin.readline().strip().split()
V = int(li[0])
E = int(li[1])

g = Graph(V)

for i in range(E) :
    arr = stdin.readline().strip().split()
    fv = int(arr[0])
    sv = int(arr[1])
    g.addEdge(fv, sv)

li = stdin.readline().strip().split()
sv = int(li[0])
ev = int(li[1])

li = g.getPathDFS(sv, ev)

if li != None :
    for element in li :
        print(element, end = ' ')
        
 
 
4. Code : Get Path - BFS
Send Feedback
Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), find and print the path from v1 to v2 (if exists). Print nothing if there is no path between v1 and v2.
Find the path using BFS and print the shortest path available.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
3. Print the path in reverse order. That is, print v2 first, then intermediate vertices and v1 at last.
4. Save the input graph in Adjacency Matrix.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
The following line contain two integers, that denote the value of v1 and v2.
Output Format :
Print the path from v1 to v2 in reverse order.
Constraints :
2 <= V <= 1000
1 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
0 <= v1 <= 2^31 - 1
0 <= v2 <= 2^31 - 1
Time Limit: 1 second
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
3 0 1
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :


soln:

## Read input as specified in the question.
## Print output as specified in the question.
import queue
class Graph:
    def __init__(self,v):
        self.v=v
        self.m=[[0 for i in range(v)] for j in range(v)]
    def addEdge(self, v1, v2):
        self.m[v1][v2] = 1
        self.m[v2][v1] = 1
        
    def getShortestPath(self, sv, ev):
        visited = [False for i in range(self.v)]
        parentDict = {
            sv: None
        }
        path = []
        q = queue.Queue()
        q.put(sv)
        visited[sv] = True
        while not q.empty():
            x = q.get()
            for i in range(self.v):
                if visited[i] is False and self.m[x][i] == 1:
                    q.put(i)
                    parentDict[i] = x
                    visited[i] = True
                    if i == ev:
                        path.append(i)
                        t = parentDict[i]
                        while t is not None:
                            path.append(t)
                            t = parentDict[t]
                        print(*path)
                        return
                    



v, e = [int(x) for x in input().split()]
g=Graph(v)

for i in range(e):
    a,b=[int(x) for x in input().split()]
    g.addEdge(a,b)

x,y=[int(x) for x in input().split()]
g.getShortestPath(x,y)

5. Code : Is Connected ?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.
Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isn’t any path from vertices 0,1,3 to vertex 2.


soln: 

import sys
sys.setrecursionlimit(10**6)

class Graph:
    def __init__(self, nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [[0 for i in range(nVertices)] for j in range(nVertices)]
       
    
    def addEdge(self, v1, v2):
        self.adjMatrix[v1][v2] = 1
        self.adjMatrix[v2][v1] = 1
        
        
    def removeEdge(self, v1, v2):
        if self.containEdge(v1, v2) is False:
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v1] = 0
        
        
    def containsEdge(self, v1, v2):
        return True if self.adjMatrix[v1][v2] > 0 else False
        
    def __str__(self):
        return str(self.adjMatrix)
    
    def __dfsHelper(self, sv, visited):
        
        #print(sv, end = " ")
        visited[sv] = True            # Marking vertex as visited
        for i in range(self.nVertices):
            if self.adjMatrix[sv][i] > 0 and visited[i] is False:
                self.__dfsHelper(i, visited)
                        
        return visited
        
    
    def dfs(self, sv):          # USing DFS for traversing all vertices of a graph
        visited = [False for i in range(self.nVertices)]
        return self.__dfsHelper(sv, visited)
        
v, e = [int (i) for i in input().split()[:2]]
if v==0:
    print("true")
else:
    g = Graph(v)
    for i in range(e):
        a, b = [int(x) for x in input().split()[:2]]
        g.addEdge(a, b)  
    visited = g.dfs(0)
    flag = True
    for j in visited:
        if j is False:
            flag = False
    if flag:
        print("true")
    else:
        print("false")
        
        
 6. Code : All connected components
Send Feedback
Given an undirected graph G(V,E), find and print all the connected components of the given graph G.
Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.
3. You need to take input in main and create a function which should return all the connected components. And then print them in the main, not inside function.
Print different components in new line. And each component should be printed in increasing order (separated by space). Order of different components doesn't matter.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two space separated integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print different components in new line. And each component should be printed in increasing order of vertices (separated by space). Order of different components doesn't matter.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Sample Input 1:
4 2
0 1
2 3
Sample Output 1:
0 1 
2 3 
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
0 1 3 
2

soln: 

## Read input as specified in the question.
## Print output as specified in the question.import queue
import queue
class Graph:
    def __init__(self,nVertices):
        self.nVertices=nVertices
        self.adjMatrix=[[0 for i in range(nVertices)]for j in range(nVertices)]
        
    def addEdge(self,fv,sv):
        self.adjMatrix[fv][sv]=1
        self.adjMatrix[sv][fv]=1
    def removeEdge(self,fv,sv):
        if self.containEdge(fv,sv) is False:
            return
        self.adjMatrix[fv][sv]=0
        self.adjMatrix[sv][fv]=0
    def containEdge(self,fv,sv):
        return True if self.adjMatrix[fv][sv]>0 else False
    def __str__(self):
        return str(self.adjMatrix)
    def bfs_helper(self,u,li,visited):
        q=queue.Queue()
        q.put(u)
        #visited=[False for i in range(self.nVertices)]
        visited[u]=True
        while q.empty() is False:
            u=q.get()
            li.append(u)
            for i in range(self.nVertices):
                if self.adjMatrix[u][i]>0 and visited[i] is False:
                    q.put(i)
                    visited[i]=True
    def bfs(self) :
        visited = [False for i in range(self.nVertices)]
        for i in range(self.nVertices) :
            if visited[i] is False :
                li=[]
                self.bfs_helper(i,li,visited)
                li.sort()
                for i in li:
                    print(i,end=" ")
                print()
                
    def allConnected(self):
        self.bfs()
                
                
            
                

                
li = input().strip().split()
V = int(li[0])
E = int(li[1])

g = Graph(V)
visited=[False for i in range(g.nVertices)]

for i in range(E) :
    arr = input().strip().split()
    fv = int(arr[0])
    sv = int(arr[1])
    g.addEdge(fv, sv)
    
g.allConnected()
