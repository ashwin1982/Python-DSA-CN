Problem 1:
Remove X
Send Feedback
Given a string, compute recursively a new string where all 'x' chars have been removed.
Input format :
String S
Output format :
Modified String
Constraints :
1 <= |S| <= 10^3
where |S| represents the length of string S. 
Sample Input 1 :
xaxb
Sample Output 1:
ab
Sample Input 2 :
abc
Sample Output 2:
abc
Sample Input 3 :
xx
Sample Output 3:

Soln:

def removeX(string): 
    a="x"
    if len(string)==0:
        return string
    
    if a == string[0]:
        return removeX(string[1:])
    else:
        return string[0] + removeX(string[1:])
    pass
# Main
string = input()
print(removeX(string))



Problem 2 :

Remove Duplicates Recursively
Send Feedback
Given a string S, remove consecutive duplicates from it recursively.
Input Format :
String S
Output Format :
Output string
Constraints :
1 <= |S| <= 10^3
where |S| represents the length of string
Sample Input 1 :
aabccba
Sample Output 1 :
abcba
Sample Input 2 :
xxxyyyzwwzzz
Sample Output 2 :
xyzwz



Soln:

def removeConsecutiveDuplicates(string):
  if len(string) < 2:
    return string
  elif string[0] == string[1]:
    return removeConsecutiveDuplicates(string[1:])
  else:
    return string[0] + removeConsecutiveDuplicates(string[1:])

# Main
string = input().strip()
print(removeConsecutiveDuplicates(string))


Problem 3:

Merge Sort Code
Send Feedback
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5

Soln:

def merge(a1,a2,arr):
    i=j=k=0
    while i<len(a1) and j<len(a2):
        if(a1[i]<a2[j]):
            arr[k]=a1[i]
            k=k+1
            i=i+1
        else:
            arr[k]=a2[j]
            k=k+1
            j=j+1
    while i<len(a1):
        arr[k]=a1[i]
        k=k+1
        i=i+1
    while j<len(a2):
        arr[k]=a2[j]
        k=k+1
        j=j+1
    return arr
        



def mergeSort(arr):
    if len(arr)==0 or len(arr)==1:
        return
    mid = len(arr)//2
    a1=arr[0: mid]
    a2=arr[mid: ]
    mergeSort(a1)
    mergeSort(a2)
    arr=merge(a1,a2,arr)
    return arr

# Main
n=int(input())
arr=list(int(i) for i in input().strip().split(' '))
mergeSort(arr)
print(*arr)


Problem 4:

Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 

Soln:

def partition(arr, start, end):
    i = (start-1)        
    pivot = arr[end]     
 
    for j in range(start, end):
           if arr[j] <= pivot:
              i = i+1
              arr[i], arr[j] = arr[j], arr[i]
 
    arr[i+1], arr[end] = arr[end], arr[i+1]
    return (i+1)




def quickSort(arr, start, end):
    if len(arr) == 1:
        return arr
    if start < end:
        pi = partition(arr, start, end)
        quickSort(arr, start, pi-1)
        quickSort(arr, pi, end)
    pass

n=int(input())
arr=list(int(i) for i in input().strip().split(' '))
quickSort(arr, 0, n-1)
print(*arr)


Problem 5:

Tower Of Hanoi - Problem
Send Feedback
Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :
1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.
Print the steps required to move n disks from source rod to destination rod.
Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.
Input Format :
Integer n
Output Format :
Steps in different lines (in one line print source and destination rod name separated by space)
Constraints :
0 <= n <= 20
Sample Input 1 :
2
Sample Output 1 :
a b
a c
b c
Sample Input 2 :
3
Sample Output 2 :
a c
a b
c b
a c
b a
b c
a c


Soln:

def towerofhanoi(n, source, aux, dest):
    if n <=0 : 
        return
    towerofhanoi(n-1,source,dest,aux)
    print(source ,dest)
    towerofhanoi(n-1,aux,source,dest)
    pass

n=int(input())
towerofhanoi(n, 'a', 'b', 'c')
